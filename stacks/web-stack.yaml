AWSTemplateFormatVersion: '2010-09-09'

Description: |-
  > Creates an S3 bucket configured for hosting a static webpage.
  > Creates CloudFront distribution that has access to read the S3 bucket.

Parameters:
  RootDomainName:
    Type: String
    Description: The root DNS name of the website e.g. cloudarchitecture.io
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid root domain name
  CertificateStackName:
    Type: String
    Description: Name of the certificate stack.
  DnsStackName:
    Type: String
    Description: Name of the DNS stack.
  404Page:
    Description: >
      The default page to redirect if the object does not exist in the bucket, e.g. "/404.html".
      Does not work with "UseDeepLinks".
    Type: String
    Default: ""
  UseIndexHtmlRewrite:
    Description: >-
      Enables rewriting of directory requests to their `index.html` files.
      Example: `/about/` to `/about/index.html`.
    Default: true
    Type: String
    AllowedValues: [true, false]
  UsePathHtmlRewrite:
    Description: >-
      Enables rewriting of path requests to as request to `.html` files.
      Example: `/about` to `/about.html`.
    Default: false
    Type: String
    AllowedValues: [true, false]
  ForceRemoveTrailingSlash:
    Description: >-
      Forces removal of trailing slashes in URLs.
      Example: `/about/` redirects to `/about`
      It cannot be `true` if `ForceTrailingSlash` is `true`.
    Type: String
    Default: false
    AllowedValues: [true, false]
  ForceTrailingSlash:
    Description: >-
      Forces addition of trailing slashes in URLs.
      Example: `/about` redirects to `/about/`
      It cannot be `true` if `ForceRemoveTrailingSlash` is `true`.
    Type: String
    Default: false
    AllowedValues: [true, false]
  UseDeepLinks:
    Description: Use deep links for Single Page Applications with own router, e.g. Angular, Vue, React
    Default: false
    Type: String
    AllowedValues: [true, false]
  CloudFrontPriceClass:
    Type: String
    Description: The CloudFront distribution price class
    Default: 'PriceClass_100'
    AllowedValues: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-distributionconfig.html#cfn-cloudfront-distribution-distributionconfig-priceclass
      - 'PriceClass_100'
      - 'PriceClass_200'
      - 'PriceClass_All'
  MinimumProtocolVersion:
    Type: String
    Description: The CloudFront distribution price class
    Default: 'TLSv1.2_2018'
    AllowedValues: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-viewercertificate.html#cfn-cloudfront-distribution-viewercertificate-minimumprotocolversion
      - 'TLSv1' # Must be v1 or higher for sni-only SslSupportMethod
      - 'TLSv1.1_2016'
      - 'TLSv1.2_2018'
      - 'TLSv1_2016'

Rules:
  MutuallyExclusiveSlashBehavior:
    Assertions:
      - Assert: !Not 
          - !And
            - !Equals ["true", !Ref ForceRemoveTrailingSlash]
            - !Equals ["true", !Ref ForceTrailingSlash]
        AssertDescription: >
          ForceRemoveTrailingSlash and ForceTrailingSlash cannot both be set to true.
          Please enable only one of these options.

Conditions:
  ShouldUseSiteRequestHandlerLambda:
    !Or 
      - !Equals [true, !Ref UseIndexHtmlRewrite]
      - !Equals [true, !Ref ForceRemoveTrailingSlash]
      - !Equals [true, !Ref ForceTrailingSlash]
      - !Equals [true, !Ref UsePathHtmlRewrite]
  ShouldUseDeepLinks:
    !Equals [true, !Ref UseDeepLinks]
  ShouldUse404Page: 
    !Not [ !Equals [ !Ref 404Page, "" ] ]

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${RootDomainName} # Must have stack name for IAM to allow
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        # module scripts (and their imports) are fetched with CORS
        CorsRules:
          -
            AllowedHeaders: [ '*' ]
            AllowedMethods: [ GET ]
            AllowedOrigins: 
              - !Sub 'http://${RootDomainName}'
              - !Sub 'http://www.${RootDomainName}'
              - !Sub 'https://${RootDomainName}'
              - !Sub 'https://www.${RootDomainName}'
      Tags:
        -
          Key: Application
          Value: !Ref RootDomainName    
 
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument: # Only used for CloudFront as it's the only way, otherwise use IAM roles in IAM stack.
        Statement:
          -
            Sid: AllowCloudFrontGet
            Action: s3:GetObject
            Effect: Allow
            Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
          # We could give s3:ListBucket access to get 404 instead of 403 when an object is not found
          # but as we only host static webpages, we don't need to give extra permission, we can just assume that all 403 is 404
          # see CustomErrorResponses
  
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${S3Bucket}'
    
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'Cloudfront Distribution pointing to S3 bucket: ${S3Bucket}'
        Origins:
          -
            DomainName: !GetAtt S3Bucket.DomainName #!Select [2, !Split ["/", !GetAtt S3Bucket.WebsiteURL]]
            Id: S3Origin
            S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html # Redirects rootdomain.com to rootdomain.com/index.html, does not work with subfolders.
        Aliases:
          - !Ref RootDomainName
          - !Sub 'www.${RootDomainName}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            !If
            - ShouldUseSiteRequestHandlerLambda
            -
              -
                EventType: origin-request # Execute only when CF forwards a request to S3 origin. Does not execute if it's already cached.
                LambdaFunctionARN: !Ref VersionedSiteRequestHandlerLambda
            - !Ref "AWS::NoValue"
        PriceClass: !Ref CloudFrontPriceClass
        ViewerCertificate:
          AcmCertificateArn:
            # Certificate must be validated before it can be used here
            Fn::ImportValue: !Join [':', [!Ref CertificateStackName, CertificateArn]]
          SslSupportMethod: sni-only
          MinimumProtocolVersion: !Ref MinimumProtocolVersion
        CustomErrorResponses:
          !If
          - ShouldUseDeepLinks
          -
            -
              ErrorCode: 403 # As we don't give s3:ListBucket right in bucket policy for CloudFront, S3 will return 403 instead of 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          - !If
            - ShouldUse404Page
            -
              -
                ErrorCode: 403 # As we don't give s3:ListBucket right in bucket policy for CloudFront, S3 will return 403 instead of 404
                ResponseCode: 404
                ResponsePagePath: !Ref 404Page
            - !Ref "AWS::NoValue"
      Tags:
        -
          Key: Application # This tag is important for IAM roles
          Value: !Ref RootDomainName

  CloudFrontDNSRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      HostedZoneId:
        Fn::ImportValue: !Join [':', [!Ref DnsStackName, DNSHostedZoneId]]
      RecordSets:
        # A records for IPv4
        -
          Name: !Ref RootDomainName
          Type: A         
          AliasTarget: 
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # Static CloudFront distribution zone https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
        -
          Name: !Join ['', ['www.', !Ref RootDomainName]]
          Type: A
          AliasTarget: 
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # Static CloudFront distribution zone https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
        # AAAA records for IPv6
        -
          Name: !Ref RootDomainName
          Type: AAAA        
          AliasTarget: 
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # Static CloudFront distribution zone https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
        -
          Name: !Join ['', ['www.', !Ref RootDomainName]]
          Type: AAAA
          AliasTarget: 
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # Static CloudFront distribution zone https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid

  VersionedSiteRequestHandlerLambda:
    Type: 'AWS::Lambda::Version'
    Condition: ShouldUseSiteRequestHandlerLambda
    Properties:
      FunctionName: !Ref SiteRequestHandlerLambda

  SiteRequestHandlerLambda:  # We use shorter names to allow longer stack names (stackname+rolename cannot reach 50 chars with managed names) & IAM rules work with stack prefix
    Type: AWS::Lambda::Function
    Condition: ShouldUseSiteRequestHandlerLambda
    Properties:
      Description: >-
        Lambda@Edge function for handling URL rewrites and redirects for static website hosting.
      FunctionName: !Sub ${AWS::StackName}-url-modifier-lambda # StackName- required for role to function
      Role: !GetAtt SiteRequestHandlerLambdaRole.Arn
      Runtime: nodejs20.x
      Handler: index.handler
      MemorySize: 128
      Timeout: 5
      Environment: !Ref "AWS::NoValue" # Lambda@Edge cannot have environment variables (as future reference) https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-at-edge-function-restrictions.html
      Code:
        # index.html rewriting from: https://aws.amazon.com/blogs/compute/implementing-default-directory-indexes-in-amazon-s3-backed-amazon-cloudfront-origins-using-lambdaedge/
        ZipFile: !Sub |
          'use strict';

          const options = {
            shouldForceTrailingSlash: ${ForceTrailingSlash},
            shouldRemoveTrailingSlash: ${ForceRemoveTrailingSlash},
            shouldRewriteWithIndexHtml: ${UseIndexHtmlRewrite},
            shouldRewriteToPathHtml: ${UsePathHtmlRewrite},
          };
          if (
            options.shouldForceTrailingSlash
            && options.shouldRemoveTrailingSlash
          ) {
            throw new Error('Conflicting options: Mutually exclusive slash behavior');
          }
          if (
            !options.shouldForceTrailingSlash
            && !options.shouldRemoveTrailingSlash
            && !options.shouldRewriteWithIndexHtml
            && !options.shouldRewriteToPathHtml
          ) {
            throw new Error('All options are false. No action needed.');
          }

          const pointsToFile = (uri) => /\/[^/]+\.[^/]+$/.test(uri);
          exports.handler = (event, _context, callback) => {
            try {
              console.log('Handling request. Options:', options);

              const request = event.Records[0].cf.request; // Request to CloudFront
              const requestUri = request.uri;

              const respondRedirect = (redirectToUri) => {
                console.log('Redirect:', 'Request:', requestUri, 'Redirect:', redirectToUri);
                return callback(null, {
                  body: '',
                  status: '301',
                  statusDescription: 'Moved Permanently',
                  headers: {
                    location: [{
                      key: 'Location',
                      value: redirectToUri,
                    }],
                  }
                });
              };

              const withNewBackendRequestUri = (newUri) => {
                console.log('URI rewrite. New:', newUri, 'Original:', requestUri);
                request.uri = newUri;
                return callback(null, request);
              }

              const addQueryString = (uri) => (request.querystring || '').length > 0
                ? uri + '?' + request.querystring
                : uri;

              if (
                options.shouldForceTrailingSlash
                && !pointsToFile(requestUri)
                && !requestUri.endsWith('/')) {
                return respondRedirect(
                  addQueryString(
                    requestUri + '/',
                  ),
                );
              }

              if (
                options.shouldRemoveTrailingSlash
                  && requestUri.endsWith('/')
                  && requestUri !== '/'
              ) {
                return respondRedirect(
                  addQueryString(
                    requestUri
                        .replace(/\/\//g, '/') // Prevent open redirect by replacing double slashes with single slash
                        .slice(0, -1) // Remove trailing slash
                  ),
                );
              }

              if (
                options.shouldRewriteToPathHtml
                  && !pointsToFile(requestUri)
                  && !requestUri.endsWith('/')
              ) {
                return withNewBackendRequestUri(
                  requestUri + '.html',
                );
              }

              if (
                options.shouldRewriteWithIndexHtml
                  && !pointsToFile(requestUri)
              ) {
                return withNewBackendRequestUri(
                  requestUri.endsWith('/')
                    ? requestUri + 'index.html'
                    : requestUri + '/index.html'
                );
              }

              return callback(null, request); // Return unmodified
            } catch (e) {
              console.error(e);
              return callback(null, {
                body: 'Lambda failed: ' + e.message,
                status: '500',
                statusDescription: 'Internal Server Error',
                headers: {},
              });
            };
          };
      Tags: 
        -
          Key: Application
          Value: !Ref RootDomainName
        
  SiteRequestHandlerLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: Execution role for SiteRequestHandlerLambda
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'lambda.amazonaws.com'
            - 'edgelambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

Outputs:
  CloudFrontDistributionArn:  # Used by deployment script to be able to deploy to right S3 bucket
    Description: Tthe Amazon Resource Name (ARN) of the CloudFront distribution.
    Value: !Ref CloudFrontDistribution
  S3BucketName: # Used by deployment script to be able to deploy to right S3 bucket
    Description: Name of the S3 bucket.
    Value: !Ref S3Bucket
