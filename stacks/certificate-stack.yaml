AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Creates & validates certificate for the root + www subdomain.
  !! It must be deployed in us-east-1 to be able to be used by CloudFront.

Parameters:
  RootDomainName:
    Type: String
    Description: The root (without www or https) DNS name of the website e.g. privacylearn.com
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid root domain name
  DnsStackName:
    Type: String
    Description: Name of the DNS stack, e.g. namethatsnotlonger-dns-stack

Resources:
  CertificateValidationDNSRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Fn::ImportValue: !Join [":", [!Ref DnsStackName, DNSHostedZoneId]]
      RecordSets:
        - Name: !GetAtt AcmCertificateForHostedZone.RootVerificationRecordName
          Type: "CNAME"
          TTL: "60"
          ResourceRecords:
            - !GetAtt AcmCertificateForHostedZone.RootVerificationRecordValue
        - Name: !GetAtt AcmCertificateForHostedZone.WwwVerificationRecordName
          Type: "CNAME"
          TTL: "60"
          ResourceRecords:
            - !GetAtt AcmCertificateForHostedZone.WwwVerificationRecordValue

  # The lambda workaround exists to be able to automate certificate deployment.
  # Problem:
  #   Normally AWS AWS::CertificateManager::Certificate waits until a certificate is validated
  #   And there's no way to get validation DNS records from it to validate it if domain is not in
  #   Route 53 i.e. in another registrar.
  # Solution:
  #   Deploy a lambda that deploys the certificate (so we don't wait until certificate is validated)
  #   Get DNS records to be used in validation & export it to be used later.

  AcmCertificateForHostedZone:
    Type: Custom::VerifiableCertificate # Can also use AWS::CloudFormation::CustomResource or Custom::String
    Properties:
      ServiceToken: !GetAtt ResolveCertLambda.Arn
      # Lambda gets the following data:
      RootDomainName: !Ref RootDomainName # Lambda will create both for root and www.root
      Tags:
        - Key: Name
          Value: !Ref RootDomainName
        - Key: Application
          Value: !Ref RootDomainName

  ResolveCertLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Deploys certificate for root domain name + www and returns immediately arn + verification records.
      Role: !GetAtt ResolveCertLambdaRole.Arn
      FunctionName: !Sub ${AWS::StackName}-cert-resolver-lambda # StackName- required for role to function
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 30
      Tags:
        - Key: Application
          Value: !Ref RootDomainName
      Code:
        # Inline script is not the best way. Some variables are named shortly to not exceed the limit 4096 but it's the cheapest way (no s3 file)
        ZipFile: |- # ES modules aren't supported for inline functions, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html
          const acm = require('@aws-sdk/client-acm');
          const client = new acm.ACMClient();
          const log = (...values) => console.log(...values.map(v => typeof v === 'string' ? mask(v) : v));

          exports.handler = async (event, context) => {
            log('Request received:', JSON.stringify(event));
            try {
              switch(event.RequestType) {
                case 'Create':
                  await handleCreate(event, context);
                  break;
                case 'Update':
                  log('Update not implemented');
                  break;
                case 'Delete':
                  await handleDelete(event, context);
                  break;
                default:
                  throw new Error(`Unsupported request type: ${event.RequestType}`);
              }
            } catch(error) {
              await send(event, context, 'FAILED', {
                title: `Failed to ${event.RequestType}`,
                error: mask(error.message),
              });
            }
          };

          async function handleCreate(event, context) {
            const { RootDomainName: rootDomain, Tags: tags } = event.ResourceProperties;
            const { CertificateArn } = await client.send(
              new acm.RequestCertificateCommand({
                DomainName: rootDomain,
                SubjectAlternativeNames: [`www.${rootDomain}`],
                ValidationMethod: "DNS",
                Tags: tags,
              }),
            )
            log(`Cert requested: ${CertificateArn}`);
            const options = await waitForValidationOptions(CertificateArn);
            const data = createResponseData(options, CertificateArn, rootDomain);
            await send(event, context, 'SUCCESS', data, CertificateArn);
          }

          async function waitForValidationOptions(arn, maxAttempts = 10, delayMs = 2000) {
            for (let i = 0; i < maxAttempts; i++) {
              await new Promise(resolve => setTimeout(resolve, delayMs));
              const { Certificate } = await client.send(
                new acm.DescribeCertificateCommand({
                  CertificateArn: arn,
                })
              );
              const {DomainValidationOptions: opts} = Certificate;
              if (opts && opts.filter(opt => opt.ResourceRecord).length === 2) {
                return opts;
              }
            }
            throw new Error(`No records after ${maxAttempts} attempts.`);
          }

          async function handleDelete(event, context) {
            const { PhysicalResourceId: arn } = event;
            if (!arn) {
              throw new Error('Unknown certificate ARN');
            }
            try {
              await client.send(
                new acm.DeleteCertificateCommand({
                  CertificateArn: arn,
                }),
              )
              log(`Deleted ${event.PhysicalResourceId}`);
            } catch (error) {
              if (error.name === 'ResourceNotFoundException') {
                log('Certificate is already deleted');
              } else {
                throw error;
              }
            }
            await send(event, context, 'SUCCESS', {}, arn);
          }

          function createResponseData(options, arn, rootDomain) {
            const findRecord = (url) => options.find(option => option.DomainName === url).ResourceRecord;
            const root = findRecord(rootDomain);
            const www = findRecord(`www.${rootDomain}`);
            const data = {
              CertificateArn: arn,
              RootVerificationRecordName: root.Name,
              RootVerificationRecordValue: root.Value,
              WwwVerificationRecordName: www.Name,
              WwwVerificationRecordValue: www.Value,
            };
            return data;
          }

          /* cfn-response can't async / await :(, https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html */
          async function send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {
            try  {
              const respBody = JSON.stringify({
                Status: responseStatus,
                Reason: `See the details in CloudWatch Log Stream: ${context.logStreamName}`,
                PhysicalResourceId: physicalResourceId || context.logStreamName,
                StackId: event.StackId,
                RequestId: event.RequestId,
                LogicalResourceId: event.LogicalResourceId,
                NoEcho: noEcho || false,
                Data: responseData
              });
              const response = await fetch(event.ResponseURL, {
                method: 'PUT',
                headers: {
                  'content-type': '',
                  'content-length': Buffer.byteLength(respBody)
                },
                body: respBody
              });
              log(`Status code: ${response.status}`);
              const responseBody = await response.text();
              log(`Response body:`, responseBody);
              context.done();
            } catch (err) {
              log(`Sending response failed:`, err);
              context.done(err);
              throw err;
            }
          }

          function mask(message) {
            return message
              .replace(/X-Amz-Credential=[^&\s]+/i, 'X-Amz-Credential=*****')
              .replace(/X-Amz-Signature=[^&\s]+/i, 'X-Amz-Signature=*****');
          }

  ResolveCertLambdaRole: # We use shorter name ("cert") to allow longer stack names (stackname+rolename cannot reach 50 chars with managed names) & IAM rules work with stack prefix
    Type: AWS::IAM::Role
    Properties:
      Description: Allow deployment of certificates
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref CertificateDeployPolicy

  CertificateDeployPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows to deploy a certificate
      # ManagedPolicyName: # ManagedPolicyName: No hardcoded naming because of easier CloudFormation management
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # https://docs.aws.amazon.com/service-authorization/latest/reference/list_awscertificatemanager.html
          -
            Sid: AllowCertificateCreate
            Effect: Allow
            Action:
              - acm:RequestCertificate
            Resource: "*" # Certificate Manager does not support resource level IAM
            Condition:
              StringEquals:
                'aws:RequestTag/Application': !Ref RootDomainName
          -
            Sid: AllowCertificateUpdate
            Effect: Allow
            Action:
              - acm:DescribeCertificate
              - acm:DeleteCertificate
              - acm:AddTagsToCertificate
            Resource:
              - !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/*
            Condition:
              StringEquals:
                'aws:ResourceTag/Application': !Ref RootDomainName
              ForAllValues:StringEquals:
                  'acm:DomainNames': 
                    - !Ref RootDomainName
                    - !Sub "www.${RootDomainName}"

Outputs:
  CertificateArn:
    Description: The Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.
    Value: !GetAtt AcmCertificateForHostedZone.CertificateArn
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", CertificateArn]]
