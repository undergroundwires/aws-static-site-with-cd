name: Build & deploy

on:
  push:
    branches:
    - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      -
        name: "Infrastructure: Checkout"
        run: git clone --depth 1 "https://github.com/undergroundwires/aws-static-site-with-auto-deploys.git" aws
        # OR You can use actions/checkout instead of running git-clone:
        #   uses: actions/checkout@v2
        #     with:
        #       path: aws
        #       repository: undergroundwires/aws-static-site-with-cd
      -
        name: "Infrastructure: Create AWS user profile"
        run: >-
          bash "scripts/configure/create-user-profile.sh" \
            --profile user \
            --access-key-id ${{secrets.AWS_DEPLOYMENT_USER_ACCESS_KEY_ID}} \
            --secret-access-key ${{secrets.AWS_DEPLOYMENT_USER_SECRET_ACCESS_KEY}} \
            --region us-east-1 \
          && \
            echo "::set-env name=SESSION_NAME::${{github.actor}}-${{github.event_name}}-$(echo ${{github.sha}} | cut -c1-8)"
        working-directory: aws
      -
        name: "Infrastructure: Deploy IAM stack"
        #TODO: 
        #   - In "stack-name", rename to use whatever you'd like for the IAM stack, e.g. namethatsnotlonger-iam-stack
        #   - In "parameter-overrides":
        #     - "WebStackName": give a name for the web stack that'll be deployed later, e.g. namethatsnotlonger-web-stack
        #     - "DnsStackName": give a name for the DNS stack that'll be deployed later, e.g. namethatsnotlonger-dns-stack
        #     - "CertificateStackName": give a name for the certificate stack that'll be deployed later, e.g. namethatsnotlonger-cert-stack
        #     - "RootDomainName": update it to match your root domain e.g. google.com [without http(s) and www]
        run: >-
          bash "scripts/deploy/deploy-stack.sh" \
            --template-file stacks/iam-stack.yaml \
            --stack-name privacysexy-iam-stack \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides "WebStackName=privacysexy-web-stack DnsStackName=privacysexy-dns-stack \
                                   CertificateStackName=privacysexy-cert-stack RootDomainName=privacy.sexy" \
            --region us-east-1 --role-arn ${{secrets.AWS_IAM_STACK_DEPLOYMENT_ROLE_ARN}} \
            --profile user --session ${{ env.SESSION_NAME }}
        working-directory: aws
      -
        name: "Infrastructure: Deploy DNS stack"
        #TODO: 
        #   - In "stack-name", rename to use whatever you'd like for the DNS stack
        #   - In "parameter-overrides":
        #     - "RootDomainName": update it to match your root domain e.g. google.com [without http(s) and www]
        run: >-
          bash "scripts/deploy/deploy-stack.sh" \
            --template-file stacks/dns-stack.yaml \
            --stack-name privacysexy-dns-stack \
            --parameter-overrides "RootDomainName=privacy.sexy" \
            --region us-east-1 \
            --role-arn ${{secrets.AWS_DNS_STACK_DEPLOYMENT_ROLE_ARN}} \
            --profile user --session ${{ env.SESSION_NAME }}
        working-directory: aws
      -
        name: "Infrastructure: Deploy certificate stack"
        # It must be deployed in us-east-1, see: https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-invalid-viewer-certificate/
        #TODO: 
        #   - In "stack-name", rename to the name you've decided in IAM stack, e.g. namethatsnotlonger-cert-stack
        #   - In "parameter-overrides":
        #     - "RootDomainName": update it to match your root domain e.g. google.com [without http(s) and www]
        #     - "IamStackName": put the same name you've decided in IAM stack, e.g. namethatsnotlonger-iam-stack
        #     - "DnsStackName": put the same name you've decided in IAM stack, e.g. namethatsnotlonger-dns-stack
        run: >-
          bash "scripts/deploy/deploy-stack.sh" \
            --template-file stacks/certificate-stack.yaml \
            --stack-name privacysexy-cert-stack \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides "IamStackName=privacysexy-iam-stack RootDomainName=privacy.sexy DnsStackName=privacysexy-dns-stack" \
            --region us-east-1 \
            --role-arn ${{secrets.AWS_CERTIFICATE_STACK_DEPLOYMENT_ROLE_ARN}} \
            --profile user --session ${{ env.SESSION_NAME }}
        working-directory: aws
      -
        name: "Infrastructure: Deploy web stack"
        #TODO: 
        #   - In "stack-name", rename to use whatever you'd like for the DNS stack
        #   - In "parameter-overrides":
        #     - "CertificateStackName": put the same name you've decided in previous stacks, e.g. namethatsnotlonger-cert-stack
        #     - "DnsStackName": put the same name you've decided in previous stacks, e.g. namethatsnotlonger-dns-stack
        #     - "UseIndexHtmlRewrite": Look for "xx.com/xx/test.html" in bucket when "xx.com/xx/" is requested.
        #     - "RootDomainName": update it to match your root domain e.g. google.com [without http(s) and www]
        #     - "UseDeepLinks": (optional) its value can be true or false, its for SPA websites with own router e.g. Angular/Vue/React 
        #     - "ForceRemoveTrailingSlash": (optional) Redirects URLs ending with slash to URLs without slash
        #     - "ForceTrailingSlash": (optional) Redirects URLs without slash at the end to URLs with slash at the end
        #     - "404Page": (optional) 404 page to return if page does not exist, does not work with UseDeepLinks
        run: >-
          bash "scripts/deploy/deploy-stack.sh" \
            --template-file stacks/web-stack.yaml \
            --stack-name privacysexy-web-stack \
            --parameter-overrides "\
              CertificateStackName=privacysexy-cert-stack \
              DnsStackName=privacysexy-dns-stack \
              RootDomainName=privacy.sexy \
              UseIndexHtmlRewrite=true \
              404Page=/404.html \
            " \
            --capabilities CAPABILITY_IAM \
            --region us-east-1 \
            --role-arn ${{secrets.AWS_WEB_STACK_DEPLOYMENT_ROLE_ARN}} \
            --profile user --session ${{ env.SESSION_NAME }}
        working-directory: aws
      # TODO: Build your site here, following is an example to build NPM application
      # -
      #   name: "App: Checkout"
      #   uses: actions/checkout@v2
      #   with:
      #     path: site
      # -
      #   name: "App: Setup node"
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: '14.x'
      # -
      #   name: "App: Build"
      #   run: npm install && npm run build
      #   working-directory: site
      -
        # TODO:
        #   - Change dist (given in --folder) to folder where your public site file exists (probably created from the previous build step).
        #   - Update web stack name in (given in --web-stack-name) to stack name youdecided when deploying the infrastructure
        name: "App: Deploy to S3"
        run: >-
          bash "aws/scripts/deploy/deploy-to-s3.sh" \
            --folder site/dist \
            --web-stack-name privacysexy-web-stack --web-stack-s3-name-output-name S3BucketName \
            --storage-class ONEZONE_IA \
            --role-arn ${{secrets.AWS_S3_SITE_DEPLOYMENT_ROLE_ARN}} \
            --region us-east-1 \
            --profile user --session ${{ env.SESSION_NAME }}
      -
        # TODO:
        #   - Update web stack name in (given in --web-stack-name) to stack name youdecided when deploying the infrastructure
        name: "App: Invalidate CloudFront cache"
        run: >-
          bash "aws/scripts/deploy/invalidate-cloudfront-cache.sh" \
            --paths "/*" \
            --web-stack-name privacysexy-web-stack --web-stack-cloudfront-arn-output-name CloudFrontDistributionArn \
            --role-arn ${{secrets.AWS_CLOUDFRONT_SITE_DEPLOYMENT_ROLE_ARN}} \
            --region us-east-1 \
            --profile user --session ${{ env.SESSION_NAME }}