name: Build & deploy

on:
  push:
    branches:
    - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # TODO: Build your site here, following is an example to build NPM application
      # -
      #   name: "App: Checkout"
      #   uses: actions/checkout@v4
      #   with:
      #     path: site
      # -
      #   name: "App: Setup node"
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 'lts/*'
      # -
      #   name: "App: Build"
      #   run: npm install && npm run build
      #   working-directory: site
      -
        name: "Infrastructure: Checkout"
        run: git clone --depth 1 "https://github.com/undergroundwires/aws-static-site-with-auto-deploys.git" aws
        # OR You can use actions/checkout instead of running git-clone:
        #   uses: actions/checkout@v4
        #     with:
        #       path: aws
        #       repository: undergroundwires/aws-static-site-with-cd
      -
        # TODO: Update values:
        #     - "--root-domain": update it to match your root domain e.g. google.com [without http(s) and www]
        #     - "--resource-prefix": Rename to use whatever you'd like for stacks/resources, e.g. namethatsnotlonger-iam-stack
        #     - "--root-domain": update it to match your root domain e.g. google.com [without http(s) and www]
        #     - "--use-index-html-rewrite" (optional): Look for "xx.com/xx/test.html" in bucket when "xx.com/xx/" is requested.
        #     - "--use-deep-links" (optional): its value can be true or false, its for SPA websites with own router e.g. Angular/Vue/React 
        #     - "--force-remove-trailing-slash" (optional): Redirects URLs ending with slash to URLs without slash
        #     - "--force-trailing-slash" (optional): Redirects URLs without slash at the end to URLs with slash at the end
        #     - "--404-page" (optional): 404 page to return if page does not exist, does not work with using deep links
        name: "Infrastructure: Deploy website"
        run: |-
          bash "scripts/deploy.sh" \
            --access-key-id           '${{ secrets.AWS_DEPLOYMENT_USER_ACCESS_KEY_ID }}' \
            --secret-access-key       '${{ secrets.AWS_DEPLOYMENT_USER_SECRET_ACCESS_KEY }}' \
            --region                  'us-east-1' \
            --root-domain             'privacy.sexy' \
            --resource-prefix         'privacysexy' \
            --site-dist-dir           '${{ github.workspace }}/site/dist' \
            --session-name            "${{ github.actor }}-${{ github.event_name }}-$(echo ${{ github.sha }} | cut -c1-8)" \
            --role-arn-iam            '${{ secrets.AWS_IAM_STACK_DEPLOYMENT_ROLE_ARN }}' \
            --role-arn-dns            '${{ secrets.AWS_DNS_STACK_DEPLOYMENT_ROLE_ARN }}' \
            --role-arn-cert           '${{ secrets.AWS_CERTIFICATE_STACK_DEPLOYMENT_ROLE_ARN }}' \
            --role-arn-web            '${{ secrets.AWS_WEB_STACK_DEPLOYMENT_ROLE_ARN }}' \
            --role-arn-cf             '${{ secrets.AWS_CLOUDFRONT_SITE_DEPLOYMENT_ROLE_ARN }}' \
            --role-arn-s3-upload      '${{ secrets.AWS_S3_SITE_DEPLOYMENT_ROLE_ARN }}' \
            --use-index-html-rewrite  'true' \
            --404-page                '/404.html'
        working-directory: aws
